/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@revolist/revogrid';


interface RevogrViewportProps {
  
  /**  */
  columnStores?: Components.RevogrViewport["columnStores"]
  
  /**  */
  rowStores?: Components.RevogrViewport["rowStores"]
  
  /**  */
  dimensions?: Components.RevogrViewport["dimensions"]
  
  /**  */
  viewports?: Components.RevogrViewport["viewports"]
  
  /** Custom editors register */
  editors?: Components.RevogrViewport["editors"]
  
  /**  */
  rowClass?: Components.RevogrViewport["rowClass"]
  
  /**  */
  uuid?: Components.RevogrViewport["uuid"]
  
  /**  */
  resize?: Components.RevogrViewport["resize"]
  
  /**  */
  readonly?: Components.RevogrViewport["readonly"]
  
  /**  */
  range?: Components.RevogrViewport["range"]
  
  /** Show row indexes column */
  rowHeaders?: Components.RevogrViewport["rowHeaders"]
  
  /**  */
  columnFilter?: Components.RevogrViewport["columnFilter"]
}

interface RevogrViewportEvents {
  
  /**  */
  setDimensionSize: Parameters<JSX.RevogrViewport["onSetDimensionSize"]>[0]
  
  /**  */
  setViewportCoordinate: Parameters<JSX.RevogrViewport["onSetViewportCoordinate"]>[0]
  
  /**  */
  setViewportSize: Parameters<JSX.RevogrViewport["onSetViewportSize"]>[0]
  
  /**  */
  initialRowDragStart: Parameters<JSX.RevogrViewport["onInitialRowDragStart"]>[0]
  
  /**  */
  beforeEditStart: Parameters<JSX.RevogrViewport["onBeforeEditStart"]>[0]
}

interface RevogrViewportSlots {
  default: any
}
  
/* generated by Svelte v3.31.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let revogr_viewport;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

	return {
		c() {
			revogr_viewport = element("revogr-viewport");
			if (default_slot) default_slot.c();
			set_custom_element_data(revogr_viewport, "row-class", /*rowClass*/ ctx[0]);
			set_custom_element_data(revogr_viewport, "uuid", /*uuid*/ ctx[1]);
			set_custom_element_data(revogr_viewport, "resize", /*resize*/ ctx[2]);
			set_custom_element_data(revogr_viewport, "readonly", /*readonly*/ ctx[3]);
			set_custom_element_data(revogr_viewport, "range", /*range*/ ctx[4]);
			set_custom_element_data(revogr_viewport, "row-headers", /*rowHeaders*/ ctx[5]);
			set_custom_element_data(revogr_viewport, "column-filter", /*columnFilter*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, revogr_viewport, anchor);

			if (default_slot) {
				default_slot.m(revogr_viewport, null);
			}

			/*revogr_viewport_binding*/ ctx[21](revogr_viewport);
			current = true;

			if (!mounted) {
				dispose = [
					listen(revogr_viewport, "setDimensionSize", /*onEvent*/ ctx[8]),
					listen(revogr_viewport, "setViewportCoordinate", /*onEvent*/ ctx[8]),
					listen(revogr_viewport, "setViewportSize", /*onEvent*/ ctx[8]),
					listen(revogr_viewport, "initialRowDragStart", /*onEvent*/ ctx[8]),
					listen(revogr_viewport, "beforeEditStart", /*onEvent*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 524288) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[19], dirty, null, null);
				}
			}

			if (!current || dirty & /*rowClass*/ 1) {
				set_custom_element_data(revogr_viewport, "row-class", /*rowClass*/ ctx[0]);
			}

			if (!current || dirty & /*uuid*/ 2) {
				set_custom_element_data(revogr_viewport, "uuid", /*uuid*/ ctx[1]);
			}

			if (!current || dirty & /*resize*/ 4) {
				set_custom_element_data(revogr_viewport, "resize", /*resize*/ ctx[2]);
			}

			if (!current || dirty & /*readonly*/ 8) {
				set_custom_element_data(revogr_viewport, "readonly", /*readonly*/ ctx[3]);
			}

			if (!current || dirty & /*range*/ 16) {
				set_custom_element_data(revogr_viewport, "range", /*range*/ ctx[4]);
			}

			if (!current || dirty & /*rowHeaders*/ 32) {
				set_custom_element_data(revogr_viewport, "row-headers", /*rowHeaders*/ ctx[5]);
			}

			if (!current || dirty & /*columnFilter*/ 64) {
				set_custom_element_data(revogr_viewport, "column-filter", /*columnFilter*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(revogr_viewport);
			if (default_slot) default_slot.d(detaching);
			/*revogr_viewport_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { columnStores = undefined } = $$props;
	let { rowStores = undefined } = $$props;
	let { dimensions = undefined } = $$props;
	let { viewports = undefined } = $$props;
	let { editors = undefined } = $$props;
	let { rowClass = undefined } = $$props;
	let { uuid = undefined } = $$props;
	let { resize = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let { range = undefined } = $$props;
	let { rowHeaders = undefined } = $$props;
	let { columnFilter = undefined } = $$props;
	const scrollToCoordinate = (...args) => __ref.scrollToCoordinate(...args);
	const clearFocus = (...args) => __ref.clearFocus(...args);
	const setEdit = (...args) => __ref.setEdit(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(18, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(7, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revogr_viewport_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(7, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("columnStores" in $$props) $$invalidate(9, columnStores = $$props.columnStores);
		if ("rowStores" in $$props) $$invalidate(10, rowStores = $$props.rowStores);
		if ("dimensions" in $$props) $$invalidate(11, dimensions = $$props.dimensions);
		if ("viewports" in $$props) $$invalidate(12, viewports = $$props.viewports);
		if ("editors" in $$props) $$invalidate(13, editors = $$props.editors);
		if ("rowClass" in $$props) $$invalidate(0, rowClass = $$props.rowClass);
		if ("uuid" in $$props) $$invalidate(1, uuid = $$props.uuid);
		if ("resize" in $$props) $$invalidate(2, resize = $$props.resize);
		if ("readonly" in $$props) $$invalidate(3, readonly = $$props.readonly);
		if ("range" in $$props) $$invalidate(4, range = $$props.range);
		if ("rowHeaders" in $$props) $$invalidate(5, rowHeaders = $$props.rowHeaders);
		if ("columnFilter" in $$props) $$invalidate(6, columnFilter = $$props.columnFilter);
		if ("$$scope" in $$props) $$invalidate(19, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, columnStores*/ 262656) {
			$: if (__mounted) setProp("columnStores", columnStores);
		}

		if ($$self.$$.dirty & /*__mounted, rowStores*/ 263168) {
			$: if (__mounted) setProp("rowStores", rowStores);
		}

		if ($$self.$$.dirty & /*__mounted, dimensions*/ 264192) {
			$: if (__mounted) setProp("dimensions", dimensions);
		}

		if ($$self.$$.dirty & /*__mounted, viewports*/ 266240) {
			$: if (__mounted) setProp("viewports", viewports);
		}

		if ($$self.$$.dirty & /*__mounted, editors*/ 270336) {
			$: if (__mounted) setProp("editors", editors);
		}
	};

	return [
		rowClass,
		uuid,
		resize,
		readonly,
		range,
		rowHeaders,
		columnFilter,
		__ref,
		onEvent,
		columnStores,
		rowStores,
		dimensions,
		viewports,
		editors,
		scrollToCoordinate,
		clearFocus,
		setEdit,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		revogr_viewport_binding
	];
}

class RevogrViewport extends SvelteComponent {
  $$prop_def: RevogrViewportProps;
  $$events_def: RevogrViewportEvents;
  $$slot_def: RevogrViewportSlots;

  $on<K extends keyof RevogrViewportEvents>(type: K, callback: (e: RevogrViewportEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevogrViewportProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			columnStores: 9,
			rowStores: 10,
			dimensions: 11,
			viewports: 12,
			editors: 13,
			rowClass: 0,
			uuid: 1,
			resize: 2,
			readonly: 3,
			range: 4,
			rowHeaders: 5,
			columnFilter: 6,
			scrollToCoordinate: 14,
			clearFocus: 15,
			setEdit: 16,
			getWebComponent: 17
		});
	}

	
  /**  */
 get scrollToCoordinate(): Components.RevogrViewport["scrollToCoordinate"] {
		return this.$$.ctx[14];
	}

	
  /** Clear current grid focus */
 get clearFocus(): Components.RevogrViewport["clearFocus"] {
		return this.$$.ctx[15];
	}

	
  /**  */
 get setEdit(): Components.RevogrViewport["setEdit"] {
		return this.$$.ctx[16];
	}

	get getWebComponent(): HTMLRevogrViewportElement | undefined {
		return this.$$.ctx[17];
	}
}

export default RevogrViewport;